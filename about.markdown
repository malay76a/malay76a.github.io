---
layout: page
title: О сайте
permalink: /about/
---
Меня зовут Валентин, я frontend developer в Леруа Мерлен Россия и разрабатываю фронт основного e-commerce проекта компании.

То, что собираюсь описать в этих статьях достаточно холиварно и по этому публикую это в этом блоге, а не в блоге компании.

Продвижение веб-компонентов в компании стала способом таргетированного решения проблем фронта нашего сайта. С осени 2019 года, некоторые блоки сайта попали в А/Б тестирование, а некоторые успешно прошли и стали полноценной частью сайта.

Я пробовал нативные реализации, `lit-element` и `stencil`. На момент выбора инструмента только `lit-element` вышел в стабильную версию и казался отличным заменителем для react разработчиков. В итоге, после долгих размышлений, на рабочем проекте был выбран `lit-element`.

Обоснование этого выбора, высказал на [митапе](https://www.youtube.com/embed/LryXMX-AnvA?start=2724).

Для понимания работы с `lit-element` написал [статью](https://habr.com/ru/post/445438/) и ушёл пилить доброе - светлое.

Но в какой-то момент я подумал, что возможно это оверхед. Возможно тот набор возможностей который тащит за собой `lit-element` не нужен т.к. многие компоненты представляли собой только стилизацию компонента и его структуры, а `html` структура была похожа на:

{% highlight html %}
<style>...</style>
<slot></slot>
{% endhighlight %}

Нужна ли тут декларативность и реактивность которую предоставляет шаблонизатор `lit-html`? Вряд ли.

На сколько полезно в данном случае использование `Constructable Stylesheet Objects`? Спорно.

Критично ли тут планирование отрисовки шаблона используя `requestAnimationFrame()`? Сомневаюсь.

И так далее... 

К каждому реализованному компоненту возникало все больше и больше вопросов. Особенно к `react-like` подходу. Правильно ли это будет скалироваться, ведь мы собираемся перевести весь сайт на эту технологию.

Альтернативный вариант, который больше подходил для универсального инструмента UI я нашел в примерах реализаций AMP компонентов.

Я бы назвал его `picture-source like`. У нас есть тег `picture` который сам по себе, без внутренних тегов, не несет никакую роль, но вот если в него добавить `img` и `source` то он раскрывает свой потенциал. Хотя казалось бы, это просто еще один способ, как показать картинку на странице и всегда можно использовать `img` с атрибутом `src-set`.

На практике я встречаюсь с некоторыми текущими проблемами интеграции веб-компонентов, [например](https://medium.com/@dagot32167/%D1%81%D0%BF%D0%BE%D1%81%D0%BE%D0%B1-%D1%80%D0%B0%D0%B7%D0%BC%D0%B5%D1%81%D1%82%D0%B8%D1%82%D1%8C-%D1%8F%D0%BD%D0%B4%D0%B5%D0%BA%D1%81-%D0%BA%D0%B0%D1%80%D1%82%D1%83-%D0%B2-shadowdom-ba84a84da037).

Думаю и дальше продолжить писать свои мысли по работе с веб-компонентами. Быть может, это кому-то пригодится.
